diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
new file mode 100644
index 0000000..c033fa5
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.h
@@ -0,0 +1,102 @@
+
+/*
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderH
+ */
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wreturn-type-c-linkage"
+
+#import <React/RCTComponentViewProtocol.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name);
+#if RCT_NEW_ARCH_ENABLED
+#ifndef RCT_DYNAMIC_FRAMEWORKS
+
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> RNCPickerCls(void) __attribute__((used)); // 2
+#endif
+
+Class<RCTComponentViewProtocol> RNGestureHandlerButtonCls(void) __attribute__((used)); // 3
+Class<RCTComponentViewProtocol> RNGestureHandlerRootViewCls(void) __attribute__((used)); // 3
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+Class<RCTComponentViewProtocol> KeyboardControllerViewCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> KeyboardGestureAreaCls(void) __attribute__((used)); // 4
+Class<RCTComponentViewProtocol> OverKeyboardViewCls(void) __attribute__((used)); // 4
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX
+Class<RCTComponentViewProtocol> RNSFullWindowOverlayCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSModalScreenCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenContainerCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenContentWrapperCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenFooterCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenNavigationContainerCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderConfigCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenStackHeaderSubviewCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSScreenStackCls(void) __attribute__((used)); // 7
+Class<RCTComponentViewProtocol> RNSSearchBarCls(void) __attribute__((used)); // 7
+#endif
+
+Class<RCTComponentViewProtocol> RNSVGCircleCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGClipPathCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGDefsCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGEllipseCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeBlendCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeColorMatrixCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeCompositeCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeFloodCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeGaussianBlurCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeMergeCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFeOffsetCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGFilterCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGForeignObjectCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGGroupCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGImageCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGSvgViewCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGLinearGradientCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGLineCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGMarkerCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGMaskCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGPathCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGPatternCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGRadialGradientCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGRectCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGSymbolCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGTextCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGTextPathCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGTSpanCls(void) __attribute__((used)); // 8
+Class<RCTComponentViewProtocol> RNSVGUseCls(void) __attribute__((used)); // 8
+#if !TARGET_OS_OSX
+
+#endif
+
+
+#endif
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#pragma GCC diagnostic pop
+
diff --git a/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
new file mode 100644
index 0000000..d4ce62e
--- /dev/null
+++ b/node_modules/react-native/React/Fabric/RCTThirdPartyFabricComponentsProvider.mm
@@ -0,0 +1,147 @@
+
+/**
+ * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
+ *
+ * Do not edit this file as changes may cause incorrect behavior and will be lost
+ * once the code is regenerated.
+ *
+ * @generated by GenerateRCTThirdPartyFabricComponentsProviderCpp
+ */
+
+// OSS-compatibility layer
+
+#import "RCTThirdPartyFabricComponentsProvider.h"
+
+#import <string>
+#import <unordered_map>
+
+Class<RCTComponentViewProtocol> RCTThirdPartyFabricComponentsProvider(const char *name) {
+  static std::unordered_map<std::string, Class (*)(void)> sFabricComponentsClassMap = {
+    #if RCT_NEW_ARCH_ENABLED
+    #ifndef RCT_DYNAMIC_FRAMEWORKS
+
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+#endif
+
+#if !TARGET_OS_VISION
+
+    {"RNCPicker", RNCPickerCls}, // 2
+#endif
+
+
+    {"RNGestureHandlerButton", RNGestureHandlerButtonCls}, // 3
+
+    {"RNGestureHandlerRootView", RNGestureHandlerRootViewCls}, // 3
+#if !TARGET_OS_OSX && !TARGET_OS_TV && !TARGET_OS_VISION
+
+    {"KeyboardControllerView", KeyboardControllerViewCls}, // 4
+
+    {"KeyboardGestureArea", KeyboardGestureAreaCls}, // 4
+
+    {"OverKeyboardView", OverKeyboardViewCls}, // 4
+#endif
+
+#if !TARGET_OS_OSX && !TARGET_OS_VISION
+
+#endif
+
+
+#if !TARGET_OS_OSX
+
+    {"RNSFullWindowOverlay", RNSFullWindowOverlayCls}, // 7
+
+    {"RNSModalScreen", RNSModalScreenCls}, // 7
+
+    {"RNSScreenContainer", RNSScreenContainerCls}, // 7
+
+    {"RNSScreenContentWrapper", RNSScreenContentWrapperCls}, // 7
+
+    {"RNSScreenFooter", RNSScreenFooterCls}, // 7
+
+    {"RNSScreen", RNSScreenCls}, // 7
+
+    {"RNSScreenNavigationContainer", RNSScreenNavigationContainerCls}, // 7
+
+    {"RNSScreenStackHeaderConfig", RNSScreenStackHeaderConfigCls}, // 7
+
+    {"RNSScreenStackHeaderSubview", RNSScreenStackHeaderSubviewCls}, // 7
+
+    {"RNSScreenStack", RNSScreenStackCls}, // 7
+
+    {"RNSSearchBar", RNSSearchBarCls}, // 7
+#endif
+
+
+    {"RNSVGCircle", RNSVGCircleCls}, // 8
+
+    {"RNSVGClipPath", RNSVGClipPathCls}, // 8
+
+    {"RNSVGDefs", RNSVGDefsCls}, // 8
+
+    {"RNSVGEllipse", RNSVGEllipseCls}, // 8
+
+    {"RNSVGFeBlend", RNSVGFeBlendCls}, // 8
+
+    {"RNSVGFeColorMatrix", RNSVGFeColorMatrixCls}, // 8
+
+    {"RNSVGFeComposite", RNSVGFeCompositeCls}, // 8
+
+    {"RNSVGFeFlood", RNSVGFeFloodCls}, // 8
+
+    {"RNSVGFeGaussianBlur", RNSVGFeGaussianBlurCls}, // 8
+
+    {"RNSVGFeMerge", RNSVGFeMergeCls}, // 8
+
+    {"RNSVGFeOffset", RNSVGFeOffsetCls}, // 8
+
+    {"RNSVGFilter", RNSVGFilterCls}, // 8
+
+    {"RNSVGForeignObject", RNSVGForeignObjectCls}, // 8
+
+    {"RNSVGGroup", RNSVGGroupCls}, // 8
+
+    {"RNSVGImage", RNSVGImageCls}, // 8
+
+    {"RNSVGSvgView", RNSVGSvgViewCls}, // 8
+
+    {"RNSVGLinearGradient", RNSVGLinearGradientCls}, // 8
+
+    {"RNSVGLine", RNSVGLineCls}, // 8
+
+    {"RNSVGMarker", RNSVGMarkerCls}, // 8
+
+    {"RNSVGMask", RNSVGMaskCls}, // 8
+
+    {"RNSVGPath", RNSVGPathCls}, // 8
+
+    {"RNSVGPattern", RNSVGPatternCls}, // 8
+
+    {"RNSVGRadialGradient", RNSVGRadialGradientCls}, // 8
+
+    {"RNSVGRect", RNSVGRectCls}, // 8
+
+    {"RNSVGSymbol", RNSVGSymbolCls}, // 8
+
+    {"RNSVGText", RNSVGTextCls}, // 8
+
+    {"RNSVGTextPath", RNSVGTextPathCls}, // 8
+
+    {"RNSVGTSpan", RNSVGTSpanCls}, // 8
+
+    {"RNSVGUse", RNSVGUseCls}, // 8
+#if !TARGET_OS_OSX
+
+#endif
+
+    #endif
+    #endif
+  };
+
+  auto p = sFabricComponentsClassMap.find(name);
+  if (p != sFabricComponentsClassMap.end()) {
+    auto classFunc = p->second;
+    return classFunc();
+  }
+  return nil;
+}
diff --git a/node_modules/react-native/ReactAndroid/api/ReactAndroid.api b/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
index c699974..5dcc87f 100644
--- a/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
+++ b/node_modules/react-native/ReactAndroid/api/ReactAndroid.api
@@ -7859,6 +7859,7 @@ public class com/facebook/react/views/text/TextAttributeProps {
 	public static final field TA_KEY_LETTER_SPACING S
 	public static final field TA_KEY_LINE_BREAK_STRATEGY S
 	public static final field TA_KEY_LINE_HEIGHT S
+	public static final field TA_KEY_MAX_FONT_SIZE_MULTIPLIER S
 	public static final field TA_KEY_OPACITY S
 	public static final field TA_KEY_ROLE S
 	public static final field TA_KEY_TEXT_DECORATION_COLOR S
@@ -7891,6 +7892,7 @@ public class com/facebook/react/views/text/TextAttributeProps {
 	protected field mLetterSpacingInput F
 	protected field mLineHeight F
 	protected field mLineHeightInput F
+	protected field mMaxFontSizeMultiplier F
 	protected field mNumberOfLines I
 	protected field mOpacity F
 	protected field mRole Lcom/facebook/react/uimanager/ReactAccessibilityDelegate$Role;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextAttributeProps.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextAttributeProps.java
index 999e427..88a9249 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextAttributeProps.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/views/text/TextAttributeProps.java
@@ -61,6 +61,7 @@ public class TextAttributeProps {
   public static final short TA_KEY_LINE_BREAK_STRATEGY = 25;
   public static final short TA_KEY_ROLE = 26;
   public static final short TA_KEY_TEXT_TRANSFORM = 27;
+  public static final short TA_KEY_MAX_FONT_SIZE_MULTIPLIER = 29;
 
   public static final int UNSET = -1;
 
@@ -81,6 +82,7 @@ public class TextAttributeProps {
   protected float mLineHeight = Float.NaN;
   protected boolean mIsColorSet = false;
   protected boolean mAllowFontScaling = true;
+  protected float mMaxFontSizeMultiplier = Float.NaN;
   protected int mColor;
   protected boolean mIsBackgroundColorSet = false;
   protected int mBackgroundColor;
@@ -227,6 +229,9 @@ public class TextAttributeProps {
         case TA_KEY_TEXT_TRANSFORM:
           result.setTextTransform(entry.getStringValue());
           break;
+        case TA_KEY_MAX_FONT_SIZE_MULTIPLIER:
+           result.setMaxFontSizeMultiplier((float) entry.getDoubleValue());
+           break;
       }
     }
 
@@ -243,6 +248,8 @@ public class TextAttributeProps {
     result.setLineHeight(getFloatProp(props, ViewProps.LINE_HEIGHT, ReactConstants.UNSET));
     result.setLetterSpacing(getFloatProp(props, ViewProps.LETTER_SPACING, Float.NaN));
     result.setAllowFontScaling(getBooleanProp(props, ViewProps.ALLOW_FONT_SCALING, true));
+    result.setMaxFontSizeMultiplier(
+      getFloatProp(props, ViewProps.MAX_FONT_SIZE_MULTIPLIER, Float.NaN));
     result.setFontSize(getFloatProp(props, ViewProps.FONT_SIZE, ReactConstants.UNSET));
     result.setColor(props.hasKey(ViewProps.COLOR) ? props.getInt(ViewProps.COLOR, 0) : null);
     result.setColor(
@@ -411,16 +418,23 @@ public class TextAttributeProps {
       mAllowFontScaling = allowFontScaling;
       setFontSize(mFontSizeInput);
       setLineHeight(mLineHeightInput);
-      setLetterSpacing(mLetterSpacingInput);
     }
   }
 
+  private void setMaxFontSizeMultiplier(float maxFontSizeMultiplier) {
+     if (maxFontSizeMultiplier != mMaxFontSizeMultiplier) {
+       mMaxFontSizeMultiplier = maxFontSizeMultiplier;
+       setFontSize(mFontSizeInput);
+       setLineHeight(mLineHeightInput);
+     }
+   }
+
   private void setFontSize(float fontSize) {
     mFontSizeInput = fontSize;
     if (fontSize != ReactConstants.UNSET) {
       fontSize =
           mAllowFontScaling
-              ? (float) Math.ceil(PixelUtil.toPixelFromSP(fontSize))
+              ? (float) Math.ceil(PixelUtil.toPixelFromSP(fontSize, mMaxFontSizeMultiplier))
               : (float) Math.ceil(PixelUtil.toPixelFromDIP(fontSize));
     }
     mFontSize = (int) fontSize;
diff --git a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.cpp b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.cpp
index 9b06f12..61c54b6 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.cpp
@@ -46,6 +46,9 @@ void TextAttributes::apply(TextAttributes textAttributes) {
   allowFontScaling = textAttributes.allowFontScaling.has_value()
       ? textAttributes.allowFontScaling
       : allowFontScaling;
+    maxFontSizeMultiplier = !std::isnan(textAttributes.maxFontSizeMultiplier)
+    ? textAttributes.maxFontSizeMultiplier
+    : maxFontSizeMultiplier;
   dynamicTypeRamp = textAttributes.dynamicTypeRamp.has_value()
       ? textAttributes.dynamicTypeRamp
       : dynamicTypeRamp;
@@ -168,6 +171,7 @@ bool TextAttributes::operator==(const TextAttributes& rhs) const {
              rhs.accessibilityRole,
              rhs.role,
              rhs.textTransform) &&
+      floatEquality(maxFontSizeMultiplier, rhs.maxFontSizeMultiplier) &&
       floatEquality(opacity, rhs.opacity) &&
       floatEquality(fontSize, rhs.fontSize) &&
       floatEquality(fontSizeMultiplier, rhs.fontSizeMultiplier) &&
@@ -211,6 +215,8 @@ SharedDebugStringConvertibleList TextAttributes::getDebugProps() const {
       debugStringConvertibleItem("fontStyle", fontStyle),
       debugStringConvertibleItem("fontVariant", fontVariant),
       debugStringConvertibleItem("allowFontScaling", allowFontScaling),
+      debugStringConvertibleItem(
+           "maxFontSizeMultiplier", maxFontSizeMultiplier),
       debugStringConvertibleItem("dynamicTypeRamp", dynamicTypeRamp),
       debugStringConvertibleItem("letterSpacing", letterSpacing),
 
diff --git a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.h b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.h
index 37db366..55b4de3 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/TextAttributes.h
@@ -51,6 +51,7 @@ class TextAttributes : public DebugStringConvertible {
   std::optional<FontStyle> fontStyle{};
   std::optional<FontVariant> fontVariant{};
   std::optional<bool> allowFontScaling{};
+  Float maxFontSizeMultiplier{std::numeric_limits<Float>::quiet_NaN()};
   std::optional<DynamicTypeRamp> dynamicTypeRamp{};
   Float letterSpacing{std::numeric_limits<Float>::quiet_NaN()};
   std::optional<TextTransform> textTransform{};
@@ -117,6 +118,7 @@ struct hash<facebook::react::TextAttributes> {
         textAttributes.opacity,
         textAttributes.fontFamily,
         textAttributes.fontSize,
+        textAttributes.maxFontSizeMultiplier,
         textAttributes.fontSizeMultiplier,
         textAttributes.fontWeight,
         textAttributes.fontStyle,
diff --git a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/conversions.h b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/conversions.h
index 8e365c5..2e2a634 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/attributedstring/conversions.h
+++ b/node_modules/react-native/ReactCommon/react/renderer/attributedstring/conversions.h
@@ -909,6 +909,7 @@ constexpr static MapBuffer::Key TA_KEY_LINE_BREAK_STRATEGY = 25;
 constexpr static MapBuffer::Key TA_KEY_ROLE = 26;
 constexpr static MapBuffer::Key TA_KEY_TEXT_TRANSFORM = 27;
 constexpr static MapBuffer::Key TA_KEY_ALIGNMENT_VERTICAL = 28;
+constexpr static MapBuffer::Key TA_KEY_MAX_FONT_SIZE_MULTIPLIER = 29;
 
 // constants for ParagraphAttributes serialization
 constexpr static MapBuffer::Key PA_KEY_MAX_NUMBER_OF_LINES = 0;
@@ -1003,6 +1004,10 @@ inline MapBuffer toMapBuffer(const TextAttributes& textAttributes) {
     builder.putBool(
         TA_KEY_ALLOW_FONT_SCALING, *textAttributes.allowFontScaling);
   }
+  if (!std::isnan(textAttributes.maxFontSizeMultiplier)) {
+     builder.putDouble(
+         TA_KEY_MAX_FONT_SIZE_MULTIPLIER, textAttributes.maxFontSizeMultiplier);
+   }
   if (!std::isnan(textAttributes.letterSpacing)) {
     builder.putDouble(TA_KEY_LETTER_SPACING, textAttributes.letterSpacing);
   }
diff --git a/node_modules/react-native/ReactCommon/react/renderer/components/text/BaseTextProps.cpp b/node_modules/react-native/ReactCommon/react/renderer/components/text/BaseTextProps.cpp
index e5fd951..a0956bd 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/components/text/BaseTextProps.cpp
+++ b/node_modules/react-native/ReactCommon/react/renderer/components/text/BaseTextProps.cpp
@@ -73,6 +73,12 @@ static TextAttributes convertRawProp(
       "allowFontScaling",
       sourceTextAttributes.allowFontScaling,
       defaultTextAttributes.allowFontScaling);
+    textAttributes.maxFontSizeMultiplier = convertRawProp(
+        context,
+        rawProps,
+        "maxFontSizeMultiplier",
+        sourceTextAttributes.maxFontSizeMultiplier,
+        defaultTextAttributes.maxFontSizeMultiplier);
   textAttributes.dynamicTypeRamp = convertRawProp(
       context,
       rawProps,
@@ -266,6 +272,12 @@ void BaseTextProps::setProp(
         defaults, value, textAttributes, fontVariant, "fontVariant");
     REBUILD_FIELD_SWITCH_CASE(
         defaults, value, textAttributes, allowFontScaling, "allowFontScaling");
+    REBUILD_FIELD_SWITCH_CASE(
+        defaults,
+        value,
+        textAttributes,
+        maxFontSizeMultiplier,
+        "maxFontSizeMultiplier");
     REBUILD_FIELD_SWITCH_CASE(
         defaults, value, textAttributes, letterSpacing, "letterSpacing");
     REBUILD_FIELD_SWITCH_CASE(
diff --git a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTAttributedTextUtils.mm b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTAttributedTextUtils.mm
index 17eec1f..6f50cd7 100644
--- a/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTAttributedTextUtils.mm
+++ b/node_modules/react-native/ReactCommon/react/renderer/textlayoutmanager/platform/ios/react/renderer/textlayoutmanager/RCTAttributedTextUtils.mm
@@ -135,6 +135,7 @@ inline static CGFloat RCTBaseSizeForDynamicTypeRamp(const DynamicTypeRamp &dynam
 inline static CGFloat RCTEffectiveFontSizeMultiplierFromTextAttributes(const TextAttributes &textAttributes)
 {
   if (textAttributes.allowFontScaling.value_or(true)) {
+    CGFloat fontSizeMultiplier = !isnan(textAttributes.fontSizeMultiplier) ? textAttributes.fontSizeMultiplier : 1.0;
     if (textAttributes.dynamicTypeRamp.has_value()) {
       DynamicTypeRamp dynamicTypeRamp = textAttributes.dynamicTypeRamp.value();
       UIFontMetrics *fontMetrics =
@@ -142,10 +143,11 @@ inline static CGFloat RCTEffectiveFontSizeMultiplierFromTextAttributes(const Tex
       // Using a specific font size reduces rounding errors from -scaledValueForValue:
       CGFloat requestedSize =
           isnan(textAttributes.fontSize) ? RCTBaseSizeForDynamicTypeRamp(dynamicTypeRamp) : textAttributes.fontSize;
-      return [fontMetrics scaledValueForValue:requestedSize] / requestedSize;
-    } else {
-      return textAttributes.fontSizeMultiplier;
+      fontSizeMultiplier = [fontMetrics scaledValueForValue:requestedSize] / requestedSize;
     }
+    CGFloat maxFontSizeMultiplier =
+      !isnan(textAttributes.maxFontSizeMultiplier) ? textAttributes.maxFontSizeMultiplier : 0.0;
+    return maxFontSizeMultiplier >= 1.0 ? fminf(maxFontSizeMultiplier, fontSizeMultiplier) : fontSizeMultiplier;
   } else {
     return 1.0;
   }
diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index fc5fbe5..82daca4 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -344,6 +344,20 @@ module.exports = {
     return require('./Libraries/YellowBox/YellowBoxDeprecated');
   },
 
+  // Deprecated Prop Types
+  get ColorPropType(): $FlowFixMe {
+    return require("deprecated-react-native-prop-types").ColorPropType
+  },
+  get EdgeInsetsPropType(): $FlowFixMe {
+    return require("deprecated-react-native-prop-types").EdgeInsetsPropType
+  },
+  get PointPropType(): $FlowFixMe {
+    return require("deprecated-react-native-prop-types").PointPropType
+  },
+  get ViewPropTypes(): $FlowFixMe {
+    return require("deprecated-react-native-prop-types").ViewPropTypes
+  },
+
   // Plugins
   get DeviceEventEmitter(): RCTDeviceEventEmitter {
     return require('./Libraries/EventEmitter/RCTDeviceEventEmitter').default;
